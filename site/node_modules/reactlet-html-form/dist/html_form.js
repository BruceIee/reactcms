/** @jsx React.DOM */

var React = React || require('react/addons');
var HtmlInput = require('reactlet-html-input');
var HtmlSelect = require('reactlet-html-select');
var HtmlJsonEdit = require('reactlet-html-json-edit');
var HtmlTextEdit = require('reactlet-html-text-edit');
var HtmlWebEdit = require('reactlet-html-web-edit');

// HtmlInput component
var HtmlInput = React.createClass({displayName: "HtmlInput",
    name: 'html-form',
    mixins: [getCommonMixin],
    components: {
        HtmlInput: React.createFactory(HtmlInput),
        HtmlSelect: React.createFactory(HtmlSelect),
        HtmlJsonEdit: React.createFactory(HtmlJsonEdit),
        HtmlTextEdit: React.createFactory(HtmlTextEdit),
        HtmlWebEdit: React.createFactory(HtmlWebEdit)
    },
    
    // attribute definitions
    getAttributes: function() {
        var attributes = [
            { name:'name', type:'string', required:false, defaultValue:'', note:'form name' },
            { name:'dispatcher', type:'object', required:false, defaultValue:null, note:'flux dispatcher' },
            { name:'boxClass', type:'string', required:false, defaultValue:'', note:'container CSS class' },
            { name:'fields', type:'array', required:false, defaultValue:'', note:'html form fields' },
            { name:'action', type:'string', required:false, defaultValue:'', note:'form url' },
            { name:'method', type:'string', required:false, defaultValue:'POST', note:'form method' }
        ];
        return attributes;
    },
    
    getValue: function() {
        var result = {};
        for (var i = 0; i < this.state.fieldComponents.length; i++ ) {
            var fieldComponent = this.state.fieldComponents[i];
            var fieldName = fieldComponent.key;
            var field = this.refs[fieldName];
            result[fieldName] = field.getValue();
        }
        return result;
    },
    
    onChange: function(event) {
        var newValue = event.target.value;
        this.setState({ value: newValue });
        this.fire('change', [newValue]);
    },
    
    render: function() {
        // set content display
        var fields = [];
        for (var i = 0; i < this.state.fields.length; i++) {
            var field = this.state.fields[i];
            // pass form's layout property to components
            field.data.layout = this.state.layout;
            // add field component to fields array
            fields.push( this.components[field.type]({
                key: field.data.key,
                ref: field.data.key,
                data:field.data
            }) );
        }
        this.state.fieldComponents = fields;
        // construct form content
        var content = 
            React.createElement("div", {className: "html-form-content-container"}, 
                React.createElement("form", {action:  this.state.action, method:  this.state.method}, 
                     fields 
                )
            );
        return (
            React.createElement("div", {className:  this.state.containerClassNames.join(' ') }, 
                 content 
            )
        );
    }
});

module.exports = HtmlInput;
